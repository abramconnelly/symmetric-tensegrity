//
//  Copyright (C) 2018 Robert Connelly and Simon D. Guest
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU Affero General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU Affero General Public License for more details.
//
//  You should have received a copy of the GNU Affero General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
//  ---
//
//  This program is a port of a Java applet that was based on the earlier
//  tensegrity catalogue by Bob Connelly and developed by Bob Connelly, Bob Terrell
//  Allen Back.
//

// a listing of the group elements as products of cycles

/* a4
"1"             0
"(123)"   =gn0  1       generator g_k in the book is g_{k-1} here
"(132)"         2
"(12)(34)"=gn1  3
"(134)"         4
"(234)"         5
"(13)(24) =gn2  6
"(243)"         7
"(124)"         8
"(14)(23)"      9
"(142)"        10
"(143)"        11
                     a4z2 is a4 times 1 followed by times -1 = gn3 = element 12 */

/* s4
"1",           0  "(12)"=gn0    1  "(123)"=gn1 2
"(32)"         3  "(321)"       4  "(31)"      5
"(1234)"=gn2   6  "(423)"       7  "(4213)"    8
"(413)"        9  "(43)"       10  "(43)(12)" 11
"(42)(31)"    12  "(4132)"     13  "(432)"    14
"(4312)"      15  "(412)"      16  "(42)"     17
"(4321)"      18  "(431)"      19  "(41)"     20
"(421)"       21  "(4231)"     22  "(41)(32)" 23
                     s4z2 is s4 times 1 followed by times -1 = gn3 = element 24 */
  
/* a5
       1      0    (123) 1gn0   (321)  2   (12)(34)  3gn1   (134)  4    (234)  5 
(13)(24)   6gn2    (243)  7     (412)  8  (14)(23)     9    (142) 10    (143) 11
 (12345)  12gn3  (13452) 13     (345) 14     (245)    15  (12453) 16  (13245) 17
 (14532)     18    (145) 19   (14523) 20  (13)(45)    21 (23)(45) 22 (12)(45) 23
 (13524)     24 (24)(53) 25   (12435) 26   (14235)    27  (14352) 28 (14)(35) 29
   (354)     30  (12354) 31   (13542) 32  (12)(35)    33    (135) 34    (235) 35
 (14253)     36  (14325) 37  (14)(25) 38   (13254)    39    (254) 40  (12543) 41
   (125)     42 (13)(25) 43     (253) 44  (25)(34)    45  (12534) 46  (13425) 47
 (15432)     48    (154) 49   (15423) 50     (153)    51 (15)(23) 52    (152) 53
 (15234)     54  (15342) 55  (15)(34) 56  (15)(24)    57  (15243) 58  (15324) 59
                     a5z2 is a5 times 1 followed by times -1 = gn4 = element 60 */

const numeric = require('numeric');
const math = require('mathjs');

/**
 * Initialize OOP structure and fill member variables
 * with relevant data (group names, structures, etc.).
 * There are four sections:
 *     1) basic information
 *     2) group information
 *     3) representation information
 *     4) valid cable/strut choices 
 */
function symtens() {

    // basic information (many uninitialized)
    this.grp = 0;  // which group we are using
    this.nsaved = 0;
    this.lines = [];
    this.thk = 0.65;  // thickness coefficient
    this.omeg1 = .35; 
    this.omeg_1 = 0;
    this.c1 = 0;
    this.c2 = 0;
    this.s1 = 0;
    this.c = 0;
    this.winr = 0;
    this.rk = 0;
    this.Jp1 = [];
    this.JOM = [];
    this.Jom = [];
    this.Jg  = [];
    this.eps = 0.00001;

    // group information
    this.grpname = ["A4","A4Z2","S4","S4Z2","A5","A5Z2"]; 
    this.order =   [  12,    24,  24,    48,  60,   120];
    this.many = this.grpname.length;  // number of groups implemented
    this.gens = [3,4,3,4,4,5];  // number of generators of each group
    this.isinvolution = 
    [
	  [ // a4
	     true, false, false,  true,
	    false, false,  true, false,
	    false,  true, false, false
	  ],
	  [ // a4z2
	     true, false, false,  true,
	    false, false,  true, false,
	    false,  true, false, false,
	     true, false, false,  true,
	    false, false,  true, false,
	    false,  true, false, false
	  ],
	  [ // s4
	     true,  true, false,  true, false,  true,
	    false, false, false, false,  true, false,
	     true, false, false, false, false,  true,
	    false, false,  true, false, false,  true
	  ],
	  [ // s4z2
	     true,  true, false,  true, false,  true,
	    false, false, false, false,  true, false,
	     true, false, false, false, false,  true,
	    false, false,  true, false, false,  true,
	     true,  true, false,  true, false,  true,
	    false, false, false, false,  true, false,
	     true, false, false, false, false,  true,
	    false, false,  true, false, false,  true
	  ],
	  [ // a5
	     true, false, false,  true, false, false,  true, false, false,  true,
	    false, false, false, false, false, false, false, false, false, false,
	    false,  true,  true,  true, false, false,  true, false,  true, false,
	    false, false, false,  true, false, false, false, false,  true, false,
	    false, false, false,  true, false,  true, false, false, false, false,
	    false, false,  true, false, false, false,  true,  true, false, false
	  ],
	  [ // a5z2
	     true, false, false,  true, false, false,  true, false, false,  true,
	    false, false, false, false, false, false, false, false, false, false,
	    false,  true,  true,  true, false, false,  true, false,  true, false,
	    false, false, false,  true, false, false, false, false,  true, false,
	    false, false, false,  true, false,  true, false, false, false, false,
	    false, false,  true, false, false, false,  true,  true, false, false,
	     true, false, false,  true, false, false,  true, false, false,  true,
	    false, false, false, false, false, false, false, false, false, false,
	    false,  true,  true,  true, false, false,  true, false,  true, false,
	    false, false, false,  true, false, false, false, false,  true, false,
	    false, false, false,  true, false,  true, false, false, false, false,
	    false, false,  true, false, false, false,  true,  true, false, false
	  ]
    ];
    this.to =  // the power of generators to produce the group elements
    [
      [ // a4
	[0,0,0], [1,0,0], [2,0,0], 
	[0,1,0], [1,1,0], [2,1,0],
	[0,0,1], [1,0,1], [2,0,1],
	[0,1,1], [1,1,1], [2,1,1]
      ],
      [ // a4z2
	[0,0,0,0], [1,0,0,0], [2,0,0,0], 
	[0,1,0,0], [1,1,0,0], [2,1,0,0],
	[0,0,1,0], [1,0,1,0], [2,0,1,0],
	[0,1,1,0], [1,1,1,0], [2,1,1,0],
	[0,0,0,1], [1,0,0,1], [2,0,0,1], 
	[0,1,0,1], [1,1,0,1], [2,1,0,1],
	[0,0,1,1], [1,0,1,1], [2,0,1,1],
	[0,1,1,1], [1,1,1,1], [2,1,1,1]
      ],
      [ // s4    (element #2 of s4 is gen_0^0 gen_1^1 gen_2^0 etc)
	[0,0,0], [1,0,0], [0,1,0], [1,1,0], [0,2,0], [1,2,0],
	[0,0,1], [1,0,1], [0,1,1], [1,1,1], [0,2,1], [1,2,1],
	[0,0,2], [1,0,2], [0,1,2], [1,1,2], [0,2,2], [1,2,2],
	[0,0,3], [1,0,3], [0,1,3], [1,1,3], [0,2,3], [1,2,3]
      ],
      [ // s4z2
	[0,0,0,0], [1,0,0,0], [0,1,0,0], [1,1,0,0], [0,2,0,0], [1,2,0,0],
	[0,0,1,0], [1,0,1,0], [0,1,1,0], [1,1,1,0], [0,2,1,0], [1,2,1,0],
	[0,0,2,0], [1,0,2,0], [0,1,2,0], [1,1,2,0], [0,2,2,0], [1,2,2,0],
	[0,0,3,0], [1,0,3,0], [0,1,3,0], [1,1,3,0], [0,2,3,0], [1,2,3,0],
	[0,0,0,1], [1,0,0,1], [0,1,0,1], [1,1,0,1], [0,2,0,1], [1,2,0,1],
	[0,0,1,1], [1,0,1,1], [0,1,1,1], [1,1,1,1], [0,2,1,1], [1,2,1,1],
	[0,0,2,1], [1,0,2,1], [0,1,2,1], [1,1,2,1], [0,2,2,1], [1,2,2,1],
	[0,0,3,1], [1,0,3,1], [0,1,3,1], [1,1,3,1], [0,2,3,1], [1,2,3,1]
      ],
      [ // a5
	[0,0,0,0], [1,0,0,0], [2,0,0,0], [0,1,0,0], [1,1,0,0], [2,1,0,0],
	[0,0,1,0], [1,0,1,0], [2,0,1,0], [0,1,1,0], [1,1,1,0], [2,1,1,0],
	[0,0,0,1], [1,0,0,1], [2,0,0,1], [0,1,0,1], [1,1,0,1], [2,1,0,1],
	[0,0,1,1], [1,0,1,1], [2,0,1,1], [0,1,1,1], [1,1,1,1], [2,1,1,1],
	[0,0,0,2], [1,0,0,2], [2,0,0,2], [0,1,0,2], [1,1,0,2], [2,1,0,2],
	[0,0,1,2], [1,0,1,2], [2,0,1,2], [0,1,1,2], [1,1,1,2], [2,1,1,2],
	[0,0,0,3], [1,0,0,3], [2,0,0,3], [0,1,0,3], [1,1,0,3], [2,1,0,3],
	[0,0,1,3], [1,0,1,3], [2,0,1,3], [0,1,1,3], [1,1,1,3], [2,1,1,3],
	[0,0,0,4], [1,0,0,4], [2,0,0,4], [0,1,0,4], [1,1,0,4], [2,1,0,4],
	[0,0,1,4], [1,0,1,4], [2,0,1,4], [0,1,1,4], [1,1,1,4], [2,1,1,4]
      ], 
      [ // a5z2
	[0,0,0,0,0],[1,0,0,0,0],[2,0,0,0,0],[0,1,0,0,0],[1,1,0,0,0],[2,1,0,0,0],
	[0,0,1,0,0],[1,0,1,0,0],[2,0,1,0,0],[0,1,1,0,0],[1,1,1,0,0],[2,1,1,0,0],
	[0,0,0,1,0],[1,0,0,1,0],[2,0,0,1,0],[0,1,0,1,0],[1,1,0,1,0],[2,1,0,1,0],
	[0,0,1,1,0],[1,0,1,1,0],[2,0,1,1,0],[0,1,1,1,0],[1,1,1,1,0],[2,1,1,1,0],
	[0,0,0,2,0],[1,0,0,2,0],[2,0,0,2,0],[0,1,0,2,0],[1,1,0,2,0],[2,1,0,2,0],
	[0,0,1,2,0],[1,0,1,2,0],[2,0,1,2,0],[0,1,1,2,0],[1,1,1,2,0],[2,1,1,2,0],
	[0,0,0,3,0],[1,0,0,3,0],[2,0,0,3,0],[0,1,0,3,0],[1,1,0,3,0],[2,1,0,3,0],
	[0,0,1,3,0],[1,0,1,3,0],[2,0,1,3,0],[0,1,1,3,0],[1,1,1,3,0],[2,1,1,3,0],
	[0,0,0,4,0],[1,0,0,4,0],[2,0,0,4,0],[0,1,0,4,0],[1,1,0,4,0],[2,1,0,4,0],
	[0,0,1,4,0],[1,0,1,4,0],[2,0,1,4,0],[0,1,1,4,0],[1,1,1,4,0],[2,1,1,4,0],
	[0,0,0,0,1],[1,0,0,0,1],[2,0,0,0,1],[0,1,0,0,1],[1,1,0,0,1],[2,1,0,0,1],
	[0,0,1,0,1],[1,0,1,0,1],[2,0,1,0,1],[0,1,1,0,1],[1,1,1,0,1],[2,1,1,0,1],
	[0,0,0,1,1],[1,0,0,1,1],[2,0,0,1,1],[0,1,0,1,1],[1,1,0,1,1],[2,1,0,1,1],
	[0,0,1,1,1],[1,0,1,1,1],[2,0,1,1,1],[0,1,1,1,1],[1,1,1,1,1],[2,1,1,1,1],
	[0,0,0,2,1],[1,0,0,2,1],[2,0,0,2,1],[0,1,0,2,1],[1,1,0,2,1],[2,1,0,2,1],
	[0,0,1,2,1],[1,0,1,2,1],[2,0,1,2,1],[0,1,1,2,1],[1,1,1,2,1],[2,1,1,2,1],
	[0,0,0,3,1],[1,0,0,3,1],[2,0,0,3,1],[0,1,0,3,1],[1,1,0,3,1],[2,1,0,3,1],
	[0,0,1,3,1],[1,0,1,3,1],[2,0,1,3,1],[0,1,1,3,1],[1,1,1,3,1],[2,1,1,3,1],
	[0,0,0,4,1],[1,0,0,4,1],[2,0,0,4,1],[0,1,0,4,1],[1,1,0,4,1],[2,1,0,4,1],
	[0,0,1,4,1],[1,0,1,4,1],[2,0,1,4,1],[0,1,1,4,1],[1,1,1,4,1],[2,1,1,4,1]
      ] 
    ];

    // constants used in representations
    const rt3 = Math.sqrt(3.0);
    const rt5 = Math.sqrt(5.0);
    const rt2 = Math.sqrt(2.0);
    const tau   = (1.0+rt5)/2.0;
    const tap   = (1.0-rt5)/2.0;

    // representation information
    this.reps = [5,9,6,11,6,11]; // 1+number of irr reps (so numbering matches book)
    this.is3dfaithful =  // is3dfaithful[group 0][rep 4] is true, etc
    [
      [false,false,false,false, true],                                    //a4
      [false,false,false,false,false,false,false,false,true],             //a4z2
      [false,false,false,false, true, true],                              //s4
      [false,false,false,false,false,false,false,false,false, true, true],//s4z2
      [false,false, true, true,false,false],                              //a5
      [false,false,false,false,false,false,false, true, true,false,false],//a5z2
    ];
    this.cx =  // true: is 2x2 real version of a complex rep
    [ [ // a4
	false, false,  true,  true, false],
      [ // a4z2
	false, false,  true,  true, false,
	       false,  true,  true, false],
      [ // s4
	false, false, false, false, false, false],
      [ // s4z2
	false, false, false, false, false, false,
	       false, false, false, false, false],
      [ // a5
	false, false, false, false, false, false],
      [ // a5z2
	false, false, false, false, false, false,
	       false, false, false, false, false]
    ];
    this.mx =  // mx[0][4][gn][i][j] is (i,j) entry of rep#4 of generator#gn of group 0
    [
      [ // a4
	[                                            // rep 0, false, copy of 1
	  [[1.0]],[[1.0]],[[1.0]]                      
	],
	[                                                              // rep 1
	  [[1.0]],[[1.0]],[[1.0]]                      
	],
	[                                            // rep 2, real 2x2 version
	  [[    -0.5, -rt3/2.0],
	   [ rt3/2.0,     -0.5]],
	  [[ 1.0, 0.0],
	   [ 0.0, 1.0]],
	  [[ 1.0, 0.0],
	   [ 0.0, 1.0]]
	],
	[                                            // rep 3, real 2x2 version
	  [[    -0.5,  rt3/2.0],
	   [-rt3/2.0,     -0.5]],
	  [[ 1.0, 0.0],
	   [ 0.0, 1.0]],
	  [[ 1.0, 0.0],
	   [ 0.0, 1.0]]
	],
	[                                                              // rep 4
	  [[ 0.0, 1.0, 0.0],
	   [ 0.0, 0.0,-1.0],
	   [-1.0, 0.0, 0.0]],
	 [[ 1.0, 0.0, 0.0],
	  [ 0.0,-1.0, 0.0],
	  [ 0.0, 0.0,-1.0]],
	 [[-1.0, 0.0, 0.0],
	  [ 0.0, 1.0, 0.0],
	  [ 0.0, 0.0,-1.0]]
	]
      ],
      [ // a4z2
	[                                            // rep 0, false, copy of 1
	  [[1.0]],[[1.0]],[[1.0]],[[1.0]]                      
	],
	[                                                              // rep 1
	  [[1.0]],[[1.0]],[[1.0]],[[1.0]]                      
	],
	[                                            // rep 2, real 2x2 version
	  [[    -0.5, -rt3/2.0],
	   [ rt3/2.0,     -0.5]],
	  [[ 1.0, 0.0],
	   [ 0.0, 1.0]],
	  [[ 1.0, 0.0],
	   [ 0.0, 1.0]],
	  [[ 1.0, 0.0],
	   [ 0.0, 1.0]]
	],
	[                                            // rep 3, real 2x2 version
	  [[    -0.5,  rt3/2.0],
	   [-rt3/2.0,     -0.5]],
	  [[ 1.0, 0.0],
	   [ 0.0, 1.0]],
	  [[ 1.0, 0.0],
	   [ 0.0, 1.0]],
	  [[ 1.0, 0.0],
	   [ 0.0, 1.0]]
	],
	[                                                              // rep 4
	  [[ 0.0, 1.0, 0.0],
	   [ 0.0, 0.0,-1.0],
	   [-1.0, 0.0, 0.0]],
	  [[ 1.0, 0.0, 0.0],
	   [ 0.0,-1.0, 0.0],
	   [ 0.0, 0.0,-1.0]],
	  [[-1.0, 0.0, 0.0],
	   [ 0.0, 1.0, 0.0],
	   [ 0.0, 0.0,-1.0]],
	  [[ 1.0, 0.0, 0.0],
	   [ 0.0, 1.0, 0.0],
	   [ 0.0, 0.0, 1.0]]
	],    
	[                                                              // rep 5
	  [[ 1.0]],[[ 1.0]],[[ 1.0]],[[-1.0]]                      
	],
	[                                             //  rep 6, real 2x2 version
	  [[    -0.5, -rt3/2.0],
	   [ rt3/2.0,     -0.5]],
	  [[ 1.0, 0.0],
	   [ 0.0, 1.0]],
	  [[ 1.0, 0.0],
	   [ 0.0, 1.0]],
	  [[-1.0, 0.0],
	   [ 0.0,-1.0]]
	],
	[                                             // rep 7, real 2x2 version
	  [[    -0.5,  rt3/2.0],
	   [-rt3/2.0,     -0.5]],
	  [[ 1.0, 0.0],
	   [ 0.0, 1.0]],
	  [[ 1.0, 0.0],
	   [ 0.0, 1.0]],
	  [[-1.0, 0.0],
	   [ 0.0,-1.0]]
	],
	[                                                              // rep 8
	  [[ 0.0, 1.0, 0.0],
	   [ 0.0, 0.0,-1.0],
	   [-1.0, 0.0, 0.0]],
	  [[ 1.0, 0.0, 0.0],
	   [ 0.0,-1.0, 0.0],
	   [ 0.0, 0.0,-1.0]],
	  [[-1.0, 0.0, 0.0],
	   [ 0.0, 1.0, 0.0],
	   [ 0.0, 0.0,-1.0]],
	  [[-1.0, 0.0, 0.0],
	   [ 0.0,-1.0, 0.0],
	   [ 0.0, 0.0,-1.0]]
	]
      ],
      [ // s4
	[                                            // rep 0, false, copy of 1
	  [[1.0]],[[1.0]],[[1.0]]                      
	],
	[                                                              // rep 1
	  [[1.0]],[[1.0]],[[1.0]]
	],
	[                                                              // rep 2
	  [[-1.0]],[[ 1.0]],[[ -1.0]]
	],
	[                                                              // rep 3
	  [[-1.0, 0.0],
	   [ 0.0, 1.0]],
	  [[    -0.5, -rt3/2.0],
	   [ rt3/2.0,     -0.5]],
	  [[     0.5, -rt3/2.0],
	   [-rt3/2.0,     -0.5]]
	],
	[                                                              // rep 4
	  [[-1.0, 0.0, 0.0], // rep 4 of g(12)
	   [ 0.0, 0.0, 1.0],
	   [ 0.0, 1.0, 0.0]],
	  [[ 0.0, 1.0, 0.0], // g(123)
	   [ 0.0, 0.0,-1.0],
	   [-1.0, 0.0, 0.0]],
	  [[ 0.0, 0.0,-1.0], // g(1234)
	   [ 0.0, 1.0, 0.0],
	   [ 1.0, 0.0, 0.0]]  
	],
	[                                                              // rep 5
	  [[ 1.0, 0.0, 0.0], 
	   [ 0.0, 0.0,-1.0],
	   [ 0.0,-1.0, 0.0]],
	  [[ 0.0, 1.0, 0.0], 
	   [ 0.0, 0.0,-1.0],
	   [-1.0, 0.0, 0.0]],
	  [[ 0.0, 0.0, 1.0],
	   [ 0.0,-1.0, 0.0],
	   [-1.0, 0.0, 0.0]]
	]
      ],
      [ // s4z2
	[                                            // rep 0, false, copy of 1
	  [[1.0]],[[1.0]],[[1.0]],[[1.0]]                      
	],
	[                                                              // rep 1
	  [[1.0]],[[1.0]],[[1.0]],[[1.0]]
	],
	[                                                              // rep 2
	  [[-1.0]],[[ 1.0]],[[ -1.0]],[[1.0]]
	],
	[                                                              // rep 3
	  [[-1.0, 0.0],
	   [ 0.0, 1.0]],
	  [[    -0.5, -rt3/2.0],
	   [ rt3/2.0,     -0.5]],
	  [[     0.5, -rt3/2.0],
	   [-rt3/2.0,     -0.5]],
	  [[ 1.0, 0.0],
	   [ 0.0, 1.0]]
	],
	[                                                              // rep 4
	  [[-1.0, 0.0, 0.0], 
	   [ 0.0, 0.0, 1.0],
	   [ 0.0, 1.0, 0.0]],
	  [[ 0.0, 1.0, 0.0], 
	   [ 0.0, 0.0,-1.0],
	   [-1.0, 0.0, 0.0]],
	  [[ 0.0, 0.0,-1.0], 
	   [ 0.0, 1.0, 0.0],
	   [ 1.0, 0.0, 0.0]],  
	  [[ 1.0, 0.0, 0.0],
	   [ 0.0, 1.0, 0.0],
	   [ 0.0, 0.0, 1.0]]
	],
	[                                                              // rep 5
	  [[ 1.0, 0.0, 0.0], 
	   [ 0.0, 0.0,-1.0],
	   [ 0.0,-1.0, 0.0]],
	  [[ 0.0, 1.0, 0.0], 
	   [ 0.0, 0.0,-1.0],
	   [-1.0, 0.0, 0.0]],
	  [[ 0.0, 0.0, 1.0],
	   [ 0.0,-1.0, 0.0],
	   [-1.0, 0.0, 0.0]],
	  [[ 1.0, 0.0, 0.0],
	   [ 0.0, 1.0, 0.0],
	   [ 0.0, 0.0, 1.0]]
	],
	[                                                              // rep 6
	  [[1.0]],[[1.0]],[[1.0]],[[-1.0]]
	],
	[                                                              // rep 7
	  [[-1.0]],[[ 1.0]],[[ -1.0]],[[-1.0]]
	],
	[                                                              // rep 8
	  [[-1.0, 0.0],
	   [ 0.0, 1.0]],
	  [[    -0.5, -rt3/2.0],
	   [ rt3/2.0,     -0.5]],
	  [[     0.5, -rt3/2.0],
	   [-rt3/2.0,     -0.5]],
	  [[-1.0, 0.0],
	   [ 0.0,-1.0]]
	],
	[                                                              // rep 9
	  [[-1.0, 0.0, 0.0], 
	   [ 0.0, 0.0, 1.0],
	   [ 0.0, 1.0, 0.0]],
	  [[ 0.0, 1.0, 0.0], 
	   [ 0.0, 0.0,-1.0],
	   [-1.0, 0.0, 0.0]],
	  [[ 0.0, 0.0,-1.0], 
	   [ 0.0, 1.0, 0.0],
	   [ 1.0, 0.0, 0.0]],  
	  [[-1.0, 0.0, 0.0],
	   [ 0.0,-1.0, 0.0],
	   [ 0.0, 0.0,-1.0]]
	],
	[                                                              // rep 10 
	  [[ 1.0, 0.0, 0.0], 
	   [ 0.0, 0.0,-1.0],
	   [ 0.0,-1.0, 0.0]],
	  [[ 0.0, 1.0, 0.0], 
	   [ 0.0, 0.0,-1.0],
	   [-1.0, 0.0, 0.0]],
	  [[ 0.0, 0.0, 1.0],
	   [ 0.0,-1.0, 0.0],
	   [-1.0, 0.0, 0.0]],
	  [[-1.0, 0.0, 0.0],
	   [ 0.0,-1.0, 0.0],
	   [ 0.0, 0.0,-1.0]]
	],
      ],
      [ // a5
	[
	  [[1.0]],[[1.0]],[[1.0]],[[1.0]]
	],
	[
	  [[1.0]],[[1.0]],[[1.0]],[[1.0]]                                 
	],
	[                                                    // rep 2
	  [[ 0.0, 1.0, 0.0],
	   [ 0.0, 0.0, 1.0],
	   [ 1.0, 0.0, 0.0]],
	  [[-1.0, 0.0, 0.0],
	   [ 0.0,-1.0, 0.0],
	   [ 0.0, 0.0, 1.0]],
	  [[ 1.0, 0.0, 0.0],
	   [ 0.0,-1.0, 0.0],
	   [ 0.0, 0.0,-1.0]],
	  [[ 1.0/2, tau/2, tap/2],
	   [-tau/2,-tap/2,-1.0/2],
	   [ tap/2, 1.0/2, tau/2]]
	],
	[                                                    // rep 3
	  [[ 0.0, 1.0, 0.0],
	   [ 0.0, 0.0, 1.0],
	   [ 1.0, 0.0, 0.0]],
	  [[-1.0, 0.0, 0.0],
	   [ 0.0,-1.0, 0.0],
	   [ 0.0, 0.0, 1.0]],
	  [[ 1.0, 0.0, 0.0],
	   [ 0.0,-1.0, 0.0],
	   [ 0.0, 0.0,-1.0]],
	  [[ 1.0/2, tap/2, tau/2],
	   [-tap/2,-tau/2,-1.0/2],
	   [ tau/2, 1.0/2, tap/2]]
	],
	[                                                    // rep 4
	  [[ 0.0, 0.0, 1.0, 0.0],
	   [ 1.0, 0.0, 0.0, 0.0],
	   [ 0.0, 1.0, 0.0, 0.0],
	   [ 0.0, 0.0, 0.0, 1.0]],
	  [[-1.0, 0.0, 0.0, 0.0],
	   [ 0.0, 1.0, 0.0, 0.0],
	   [ 0.0, 0.0,-1.0, 0.0],
	   [ 0.0, 0.0, 0.0, 1.0]],
	  [[ 1.0, 0.0, 0.0, 0.0],
	   [ 0.0,-1.0, 0.0, 0.0],
	   [ 0.0, 0.0,-1.0, 0.0],
	   [ 0.0, 0.0, 0.0, 1.0]],
	  [[-3.0/4, 1.0/4,  1.0/4,-rt5/4],
	   [ 1.0/4, 1.0/4, -3.0/4,-rt5/4],
	   [-1.0/4, 3.0/4, -1.0/4, rt5/4],
	   [ rt5/4, rt5/4,  rt5/4,-1.0/4]]
	],
	[                                                    // my orth rep 5
	  [[ -1.0/2, rt3/2, 0.0, 0.0, 0.0],
	   [ -rt3/2,-1.0/2, 0.0, 0.0, 0.0],
	   [    0.0,   0.0, 0.0, 1.0, 0.0],
	   [    0.0,   0.0, 0.0, 0.0, 1.0],
	   [    0.0,   0.0, 1.0, 0.0, 0.0]],
	  [[   1.0,   0.0, 0.0, 0.0, 0.0],
	   [   0.0,   1.0, 0.0, 0.0, 0.0],
	   [   0.0,   0.0,-1.0, 0.0, 0.0],
	   [   0.0,   0.0, 0.0,-1.0, 0.0],
	   [   0.0,   0.0, 0.0, 0.0, 1.0]],
	  [[   1.0,   0.0, 0.0, 0.0, 0.0],
	   [   0.0,   1.0, 0.0, 0.0, 0.0],
	   [   0.0,   0.0, 1.0, 0.0, 0.0],
	   [   0.0,   0.0, 0.0,-1.0, 0.0],
	   [   0.0,   0.0, 0.0, 0.0,-1.0]],
	  [[     -1.0/8,  rt3*rt5/8, -rt3/4,  rt3*tap/4,   rt3*tau/4],
	   [  rt3*rt5/8,      1.0/8, -rt5/4,(3.0+rt5)/8,(-3.0+rt5)/8],
	   [      rt3/4,      rt5/4,    0.0,     -1.0/2,      -1.0/2],
	   [  rt3*tap/4,(3.0+rt5)/8,  1.0/2,      1.0/2,         0.0],
	   [ -rt3*tau/4,(3.0-rt5)/8, -1.0/2,          0,      -1.0/2]]
	]
      ],
      [ // a5z2
	[
	  [[1.0]],[[1.0]],[[1.0]],[[1.0]],[[1.0]]
	],
	[
	  [[1.0]],[[1.0]],[[1.0]],[[1.0]],[[1.0]]
	],
	[                                                    // rep 2
	  [[ 0.0, 1.0, 0.0],
	   [ 0.0, 0.0, 1.0],
	   [ 1.0, 0.0, 0.0]],
	  [[-1.0, 0.0, 0.0],
	   [ 0.0,-1.0, 0.0],
	   [ 0.0, 0.0, 1.0]],
	  [[ 1.0, 0.0, 0.0],
	   [ 0.0,-1.0, 0.0],
	   [ 0.0, 0.0,-1.0]],
	  [[ 1.0/2, tau/2, tap/2],
	   [-tau/2,-tap/2,-1.0/2],
	   [ tap/2, 1.0/2, tau/2]],
	  [[ 1.0, 0.0, 0.0],
	   [ 0.0, 1.0, 0.0],
	   [ 0.0, 0.0, 1.0]]
	],
	[                                                    // rep 3
	  [[ 0.0, 1.0, 0.0],
	   [ 0.0, 0.0, 1.0],
	   [ 1.0, 0.0, 0.0]],
	  [[-1.0, 0.0, 0.0],
	   [ 0.0,-1.0, 0.0],
	   [ 0.0, 0.0, 1.0]],
	  [[ 1.0, 0.0, 0.0],
	   [ 0.0,-1.0, 0.0],
	   [ 0.0, 0.0,-1.0]],
	  [[ 1.0/2, tap/2, tau/2],
	   [-tap/2,-tau/2,-1.0/2],
	   [ tau/2, 1.0/2, tap/2]],
	  [[ 1.0, 0.0, 0.0],
	   [ 0.0, 1.0, 0.0],
	   [ 0.0, 0.0, 1.0]]
	],
	[                                                    // rep 4
	  [[ 0.0, 0.0, 1.0, 0.0],
	   [ 1.0, 0.0, 0.0, 0.0],
	   [ 0.0, 1.0, 0.0, 0.0],
	   [ 0.0, 0.0, 0.0, 1.0]],
	  [[-1.0, 0.0, 0.0, 0.0],
	   [ 0.0, 1.0, 0.0, 0.0],
	   [ 0.0, 0.0,-1.0, 0.0],
	   [ 0.0, 0.0, 0.0, 1.0]],
	  [[ 1.0, 0.0, 0.0, 0.0],
	   [ 0.0,-1.0, 0.0, 0.0],
	   [ 0.0, 0.0,-1.0, 0.0],
	   [ 0.0, 0.0, 0.0, 1.0]],
	  [[-3.0/4, 1.0/4,  1.0/4,-rt5/4],
	   [ 1.0/4, 1.0/4, -3.0/4,-rt5/4],
	   [-1.0/4, 3.0/4, -1.0/4, rt5/4],
	   [ rt5/4, rt5/4,  rt5/4,-1.0/4]],
	  [[ 1.0, 0.0, 0.0, 0.0],
	   [ 0.0, 1.0, 0.0, 0.0],
	   [ 0.0, 0.0, 1.0, 0.0],
	   [ 0.0, 0.0, 0.0, 1.0]]
	],
	[                                                    // my orth rep 5
	  [[ -1.0/2, rt3/2, 0.0, 0.0, 0.0],
	   [ -rt3/2,-1.0/2, 0.0, 0.0, 0.0],
	   [    0.0,   0.0, 0.0, 1.0, 0.0],
	   [    0.0,   0.0, 0.0, 0.0, 1.0],
	   [    0.0,   0.0, 1.0, 0.0, 0.0]],
	  [[   1.0,   0.0, 0.0, 0.0, 0.0],
	   [   0.0,   1.0, 0.0, 0.0, 0.0],
	   [   0.0,   0.0,-1.0, 0.0, 0.0],
	   [   0.0,   0.0, 0.0,-1.0, 0.0],
	   [   0.0,   0.0, 0.0, 0.0, 1.0]],
	  [[   1.0,   0.0, 0.0, 0.0, 0.0],
	   [   0.0,   1.0, 0.0, 0.0, 0.0],
	   [   0.0,   0.0, 1.0, 0.0, 0.0],
	   [   0.0,   0.0, 0.0,-1.0, 0.0],
	   [   0.0,   0.0, 0.0, 0.0,-1.0]],
	  [[     -1.0/8,  rt3*rt5/8, -rt3/4,  rt3*tap/4,   rt3*tau/4],
	   [  rt3*rt5/8,      1.0/8, -rt5/4,(3.0+rt5)/8,(-3.0+rt5)/8],
	   [      rt3/4,      rt5/4,    0.0,     -1.0/2,      -1.0/2],
	   [  rt3*tap/4,(3.0+rt5)/8,  1.0/2,      1.0/2,         0.0],
	   [ -rt3*tau/4,(3.0-rt5)/8, -1.0/2,          0,      -1.0/2]],
	  [[   1.0,   0.0, 0.0, 0.0, 0.0],
	   [   0.0,   1.0, 0.0, 0.0, 0.0],
	   [   0.0,   0.0, 1.0, 0.0, 0.0],
	   [   0.0,   0.0, 0.0, 1.0, 0.0],
	   [   0.0,   0.0, 0.0, 0.0, 1.0]]
	],
	[
	  [[1.0]],[[1.0]],[[1.0]],[[1.0]],[[-1.0]]           // rep 6
	],
	[                                                    // rep 7
	  [[ 0.0, 1.0, 0.0],
	   [ 0.0, 0.0, 1.0],
	   [ 1.0, 0.0, 0.0]],
	  [[-1.0, 0.0, 0.0],
	   [ 0.0,-1.0, 0.0],
	   [ 0.0, 0.0, 1.0]],
	  [[ 1.0, 0.0, 0.0],
	   [ 0.0,-1.0, 0.0],
	   [ 0.0, 0.0,-1.0]],
	  [[ 1.0/2, tau/2, tap/2],
	   [-tau/2,-tap/2,-1.0/2],
	   [ tap/2, 1.0/2, tau/2]],
	  [[-1.0, 0.0, 0.0],
	   [ 0.0,-1.0, 0.0],
	   [ 0.0, 0.0,-1.0]]
	],
	[                                                    // rep 8
	  [[ 0.0, 1.0, 0.0],
	   [ 0.0, 0.0, 1.0],
	   [ 1.0, 0.0, 0.0]],
	  [[-1.0, 0.0, 0.0],
	   [ 0.0,-1.0, 0.0],
	   [ 0.0, 0.0, 1.0]],
	  [[ 1.0, 0.0, 0.0],
	   [ 0.0,-1.0, 0.0],
	   [ 0.0, 0.0,-1.0]],
	  [[ 1.0/2, tap/2, tau/2],
	   [-tap/2,-tau/2,-1.0/2],
	   [ tau/2, 1.0/2, tap/2]],
	  [[-1.0, 0.0, 0.0],
	   [ 0.0,-1.0, 0.0],
	   [ 0.0, 0.0,-1.0]]
	],
	[                                                    // rep 9
	  [[ 0.0, 0.0, 1.0, 0.0],
	   [ 1.0, 0.0, 0.0, 0.0],
	   [ 0.0, 1.0, 0.0, 0.0],
	   [ 0.0, 0.0, 0.0, 1.0]],
	  [[-1.0, 0.0, 0.0, 0.0],
	   [ 0.0, 1.0, 0.0, 0.0],
	   [ 0.0, 0.0,-1.0, 0.0],
	   [ 0.0, 0.0, 0.0, 1.0]],
	  [[ 1.0, 0.0, 0.0, 0.0],
	   [ 0.0,-1.0, 0.0, 0.0],
	   [ 0.0, 0.0,-1.0, 0.0],
	   [ 0.0, 0.0, 0.0, 1.0]],
	  [[-3.0/4, 1.0/4,  1.0/4,-rt5/4],
	   [ 1.0/4, 1.0/4, -3.0/4,-rt5/4],
	   [-1.0/4, 3.0/4, -1.0/4, rt5/4],
	   [ rt5/4, rt5/4,  rt5/4,-1.0/4]],
	  [[-1.0, 0.0, 0.0, 0.0],
	   [ 0.0,-1.0, 0.0, 0.0],
	   [ 0.0, 0.0,-1.0, 0.0],
	   [ 0.0, 0.0, 0.0,-1.0]]
	],
	[                                                    // rep 10
	  [[ -1.0/2, rt3/2, 0.0, 0.0, 0.0],
	   [ -rt3/2,-1.0/2, 0.0, 0.0, 0.0],
	   [    0.0,   0.0, 0.0, 1.0, 0.0],
	   [    0.0,   0.0, 0.0, 0.0, 1.0],
	   [    0.0,   0.0, 1.0, 0.0, 0.0]],
	  [[   1.0,   0.0, 0.0, 0.0, 0.0],
	   [   0.0,   1.0, 0.0, 0.0, 0.0],
	   [   0.0,   0.0,-1.0, 0.0, 0.0],
	   [   0.0,   0.0, 0.0,-1.0, 0.0],
	   [   0.0,   0.0, 0.0, 0.0, 1.0]],
	  [[   1.0,   0.0, 0.0, 0.0, 0.0],
	   [   0.0,   1.0, 0.0, 0.0, 0.0],
	   [   0.0,   0.0, 1.0, 0.0, 0.0],
	   [   0.0,   0.0, 0.0,-1.0, 0.0],
	   [   0.0,   0.0, 0.0, 0.0,-1.0]],
	  [[     -1.0/8,  rt3*rt5/8, -rt3/4,  rt3*tap/4,   rt3*tau/4],
	   [  rt3*rt5/8,      1.0/8, -rt5/4,(3.0+rt5)/8,(-3.0+rt5)/8],
	   [      rt3/4,      rt5/4,    0.0,     -1.0/2,      -1.0/2],
	   [  rt3*tap/4,(3.0+rt5)/8,  1.0/2,      1.0/2,         0.0],
	   [ -rt3*tau/4,(3.0-rt5)/8, -1.0/2,          0,      -1.0/2]],
	  [[  -1.0,   0.0, 0.0, 0.0, 0.0],
	   [   0.0,  -1.0, 0.0, 0.0, 0.0],
	   [   0.0,   0.0,-1.0, 0.0, 0.0],
	   [   0.0,   0.0, 0.0,-1.0, 0.0],
	   [   0.0,   0.0, 0.0, 0.0,-1.0]]
	]
      ]
    ];
    this.deg =  // of the reps. Note extra initial 1 to match book numbering
    [
      [1,1,2,2,3],
      [1,1,2,2,3,1,2,2,3], 
      [1,1,1,2,3,3],
      [1,1,1,2,3,3,1,1,2,3,3],
      [1,1,3,3,4,5],
      [1,1,3,3,4,5,1,3,3,4,5]
    ];

    // valid choices for cables and struts
    this.cables = 
    [
      ["[(134),(243)]",          "[(124), (14)(23)]"],                               // a4

      ["[(124),-(13)(24)]",      "[(142),-(134)]",           "[-(243),(12)(34)]",    // a4z2
       "[-(234),-(12)(34)]",     "[-(234),-(134)]"],

      ["[(1423),(234)]",         "[(12),(143)]",             "[(1423),(13)]",
       "[(1243),(1324)]"],                                                          // s4


      ["[-(1342),(34)]",         "[-(132),-(14)]",           "[-(14),(1234)]",
       "[-(1423),(1234)]",       "[-(1423),-(142)]",         "[-(132),(14)]",
       "[(1324),-(123)]"],                                                          // s4z2

      ["[(134),(23)(45)]",       "[(15)(24),(14532)]",       "[(12354),(143)]",
       "[(12354),(145)]",        "[(12354),(14235)]",        "[(15243),(15)(34)]",
       "[(142),(354)]",          "[(14325),(14253)]"],                              // a5

      ["[-(134),(23)(45)]",      "[-(15)(24),(14532)]",      "[-(12354),(143)]",    // (-,+)a5
       "[-(12354),(145)]",       "[-(12354),(14235)]",       "[-(15243),(15)(34)]",
       "[-(142),(354)]X",        "[-(14325),(14253)]",  
       "[(134),-(23)(45)]",      "[(15)(24),-(14532)]X",     "[(12354),-(143)]",    // (+,-)a5
       "[(12354),-(145)]",       "[(12354),-(14235)]",       "[(15243),-(15)(34)]",
       "[(142),-(354)]",         "[(14325),-(14253)]",
       "[-(134),-(23)(45)]",     "[-(15)(24),-(14532)]",     "[-(12354),-(143)]",   // (-,-)a5
       "[-(12354),-(145)]",      "[-(12354),-(14235)]X",     "[-(15243),-(15)(34)]",
       "[-(142),-(354)]",        "[-(14325),-(14253)]"]
    ];
    this.cablnumb3rs =
    [
      [ // a4
	[ 4, 7],[ 8, 9]
      ],
      [ // a4z2
	[ 8,18],[10,16],[19, 3],[17,15],[17,16]
      ],
      [ // s4
	[22, 7],[ 1,19],[22, 5],[15,13]
      ],
      [ // s4z2
	[32,10],[28,44],[44, 6],[46, 6],[46,45],[28,20],[13,26]
      ],
      [ // a5
	[ 4,22],[57,18],[31,11],[31,19],[31,27],[58,56],[10,30],[37,36]
      ],
      [   // new a5z2(-,+),(+,-),(-,-)
	[64,22],[117,18],[91,11],[91,19],[91,27],[118,56], [70,30],[97,36],
	[ 4,92], [57,78],[31,71],[31,79],[31,87], [58,116],[10,90],[37,96],
	[64,92],[117,78],[91,71],[91,79],[91,87],[118,116],[70,90],[97,96]
      ]
    ]; 
    this.struts = 
    [
      [  // a4
	["(123)","(12)(34)","(14)(23)"],
	["(123)","(13)(24)","(143)"]
      ],
      [  // a4z2
	["(123)",      "-1",        "(12)(34)",    "-(12)(34)",     "(243)",     "-(143)",
	 "-(142)",     "-(243)",    "(13)(24)"],
	["-(123)",     "(123)",     "-1",          "(12)(34)",      "-(12)(34)", "(14)(23)",
	 "(134)",      "-(142)",    "-(14)(23)"],
	["-(123)",     "(123)",     "-1",          "-(12)(34)",     "(14)(23)",  "(134)",
	 "(243)",      "-(143)"],
	["-(123)",     "(123)",     "-1",          "(12)(34)",      "(14)(23)",  "(143)",
	 "-(13)(24)",  "(243)",     "-(134)"],
	["-(123)",     "-(14)(23)", "(123)",       "-1",            "(12)(34)",  "-(12)(34)",
	 "(14)(23)",   "(134)"]
      ],
      [  // s4
	["(14)(23)",   "(13)",      "(12)",        "(1342)",        "(124)",     "(23)",
	 "(12)(34)",   "(143)",     "(34)"],
	["(14)(23)",   "(1324)",    "(13)",        "(1243)",        "(124)",     "(23)",
	 "(12)(34)",   "(234)",     "(34)"],
	["(14)(23)",   "(124)",     "(12)",        "(1243)",        "(24)",      "(1234)",
	 "(13)(24)",   "(14)",      "(123)",       "(12)(34)"],
	["(13)",       "(12)",      "(124)",       "(1234)",        "(13)(24)",  "(12)(34)"]
      ], 
      [  // s4z2
	["(12)(34)",   "-(24)",     "(143)X",      "-(14)",         "-(13)(24)X","-(34)X",
	 "(13)(24)",   "(1234)X",   "(23)X",       "-(132)X",       "-(1432)X",  "-(134)",
	 "(14)(23)X",  "(132)X",    "(1243)X",     "(12)",          "(13)X",     "-(14)(23)X",
	 "(1423)",     "-(12)X",    "-1X",         "-(1423)X",      "-(12)(34)X"],
	["(12)(34)X",  "-(24)X",    "-(13)(24)X",  "(34)X",         "(143)X",    "-(13)X",
	 "-(1342)X",   "(1234)X",   "(23)X",       "-(1234)X",      "-(134)X",   "(14)(23)X",
	 "(123)",      "(1342)X",   "(12)X",       "-(243)X",       "-(23)X",    "-(14)(23)X",
	 "(14)",       "(243)",     "-1"],
	["(12)(34)",   "-(13)(24)X","(34)",        "-(12)X",        "(143)X",    "-(24)X",
	 "(13)(24)X",  "(243)X",    "-(1342)",     "(23)X",         "-(132)X",   "-(1432)X",
	 "-(134)",     "(14)(23)",  "(1243)X",     "(13)",          "-(23)",     "(14)X",
	 "(1423)X",    "-(14)(23)X","-1X",         "-(1423)X",      "-(12)(34)X"],
	["(12)(34)",   "(243)X",    "-(13)(24)X",  "(34)X",         "-(14)X",    "-(24)X",
	 "-(34)",      "(13)(24)",  "-(1342)X",    "(23)X",         "-(123)X",   "-(1432)X",
	 "(14)(23)",   "(1342)X",   "(24)",        "(1423)X",       "-(14)(23)X","-1X",
	 "-(12)(34)X"],
	["(243)X",     "-(13)(24)X","-(14)X",      "-(23)X",        "(34)X",     "-(34)X",
	 "(13)(24)X",  "(12)(34)X", "-(1342)X",    "(1234)X",       "(23)X",     "(123)X",
	 "-(132)X",    "-(134)X",   "(12)X",       "-(12)",         "(14)X",     "(1423)X",
	 "(142)X",     "-1X",       "-(12)(34)X"],
	["(34)X",      "-(14)",     "(143)X",      "-(23)X",        "-(24)",     "(13)(24)X",
	 "-(1243)X",   "(1234)X",   "-(13)(24)X",  "(23)X",         "(132)",     "-(1432)X",  
	 "-(134)X",    "(14)(23)X", "-(13)X",      "(1243)X",       "(12)X",     "-(243)X",
	 "(243)",      "-1",        "-(14)(23)X"],
	["-(13)(24)X", "(34)X",     "-(14)X",      "(143)X",        "-(23)X",    "(13)(24)X",
	 "(12)(34)X",  "-(1342)",   "(1432)X",     "(23)X",         "-(34)X",    "-(134)X",
	 "(123)X",     "(24)X",     "(12)X",       "-(142)X",       "(142)X",    "-(12)X",
	 "-1X",        "-(12)(34)X"]
      ],
      [  // a5
	["(123)",      "(13)(24)",  "(14523)",     "(25)(34)",      "(13)(25)",  "(153)",
	 "(14)(23)",   "(14352)",   "(12543)",     "(254)",         "(12435)",   "(14253)",
	 "(12)(35)",   "(14532)",   "(15)(34)",    "(354)",         "(152)",     "(13542)",
	 "(12)(45)",   "(24)(35)",  "(15432)"],
	["(123)",      "(13)(24)",  "(14523)",     "(25)(34)",      "(12435)",   "(153)",
	 "(14)(23)",   "(13)(45)",  "(23)(45)",    "(254)",         "(14253)",   "(14)(25)",
	 "(13542)",    "(134)",     "(12)(45)",    "(235)",         "(15)(23)X", "(14235)",
	 "(15243)",    "(145)",     "(12543)"], 
	["(123)",      "(13)(24)",  "(14523)",     "(25)(34)",      "(15342)",   "(14)(23)",
	 "(13)(45)",   "(23)(45)",  "(135)",       "(254)",         "(13524)",   "(14)(25)", 
	 "(13542)",    "(12)(45)",  "(15)(24)",    "(235)",         "(15)(23)",  "(14235)",
	 "(15243)",    "(154)",     "(12543)"],
	["(123)",      "(13)(24)",  "(14523)X",    "(13)(25)",      "(14)(32)",  "(14352)X",
	 "(135)",      "(13452)",   "(15342)",     "(254)",         "(12)(35)",  "(15)(34)", 
	 "(354)",      "(12)(34)",  "(13245)",     "(14)(25)",      "(234)",     "(12)(45)",
	 "(15)(23)",   "(14235)",   "(15243)"],
	["(123)",      "(13)(24)",  "(13)(25)",    "(14)(32)",      "(14352)",   "(23)(45)",
	 "(12543)",    "(15342)",   "(245)",       "(14)(25)",      "(143)",     "(15)(24)",
	 "(235)X",     "(154)"],
	["(13)(24)",   "(25)(34)",  "(14)(23)",    "(12435)",       "(23)(45)",  "(14352)",
	 "(153)",      "(123)",     "(12543)",     "(254)",         "(14532)X",  "(354)",
	 "(14253)",    "(12)(34)",  "(14)(25)",    "(13542)",       "(234)",     "(235)",
	 "(14)(35)",   "(15432)X",  "(13)(45)"],
	["(13)(24)",   "(13)(25)",  "(14352)",     "(153)",         "(12543)",   "(254)",
	 "(12)(34)",   "(13245)",   "(12)(35)"],
	["(13)(24)",   "(13254)",   "(25)(34)",    "(13)(45)",      "(15342)",   "(135)",
	 "(123)",      "(13452)",   "(254)",       "(14)(25)X",     "(13542)",   "(143)",
	 "(15)(24)",   "(12)(45)",  "(15243)"] 
      ],
      [   // new a5z2(+,-,+,-,+,-) In each strutlist adjoin (-c1), (-c2), and (-1).
		       //begin copy 1 of 3, for the (-,+)a5  cables
	["(123)X",     "(13)(24)X", "(14523)X",    "(25)(34)X",     "(13)(25)X", "(153)X",
	 "(14)(23)X",  "(14352)X",  "(12543)X",    "(254)X",        "(12435)X",  "(14253)X",
	 "(12)(35)X",  "(14532)X",  "(15)(34)X",   "(354)X",        "(152)",     "(13542)X",
	 "(12)(45)X",  "(24)(35)X", "(15432)X",
	 "-(123)X",    "-(13)(24)X","-(14523)X",   "-(25)(34)X",    "-(13)(25)X","-(153)X",
	 "-(14)(23)X", "-(14352)X", "-(12543)X",   "-(254)X",       "-(12435)X", "-(14253)X",
	 "-(12)(35)X", "-(14532)X", "-(15)(34)X",  "-(354)X",       "-(152)X",   "-(13542)X",
	 "-(12)(45)X", "-(24)(35)X","-(15432)X",   
	 "(134)",      "-(23)(45)", "-1"],
	["(123)",      "(13)(24)",  "(14523)",     "(25)(34)",      "(12435)",   "(153)",
	 "(14)(23)",   "(13)(45)",  "(23)(45)X",   "(254)",         "(14253)",   "(14)(25)",
	 "(13542)X",   "(134)",     "(12)(45)",    "(235)",         "(15)(23)X", "(14235)",
	 "(15243)X",   "(145)X",    "(12543)X", 
	 "-(123)",     "-(13)(24)", "-(14523)",    "-(25)(34)",     "-(12435)",  "-(153)X",
	 "-(14)(23)",  "-(13)(45)", "-(23)(45)",   "-(254)X",       "-(14253)",  "-(14)(25)",
	 "-(13542)",   "-(134)",    "-(12)(45)X",  "-(235)",        "-(15)(23)", "-(14235)",
	 "-(15243)",   "-(145)",    "-(12543)",
	 "(15)(24)",   "-(14532)",  "-1"], 
	["(123)X",     "(13)(24)",  "(14523)X",    "(25)(34)X",     "(15342)",   "(14)(23)",
	 "(13)(45)X",  "(23)(45)",  "(135)",       "(254)",         "(13524)",   "(14)(25)",
	 "(13542)X",   "(12)(45)X", "(15)(24)",    "(235)",         "(15)(23)X", "(14235)X",
	 "(15243)",    "(154)",     "(12543)X",
	 "-(123)X",    "-(13)(24)X","-(14523)",    "-(25)(34)X",    "-(15342)",  "-(14)(23)X",
	 "-(13)(45)X", "-(23)(45)", "-(135)X",     "-(254)",        "-(13524)",  "-(14)(25)X",
	 "-(13542)",   "-(12)(45)X","-(15)(24)X",  "-(235)",        "-(15)(23)",
	 "-(14235)X",  "-(15243)",  "-(154)X",     "-(12543)",
	 "(12354)",    "-(143)",    "-1"],
	["(123)",      "(13)(24)",  "(14523)",     "(13)(25)",      "(14)(32)",  "(14352)",
	 "(135)",      "(13452)",   "(15342)",     "(254)",         "(12)(35)",  "(15)(34)",
	 "(354)",      "(12)(34)",  "(13245)",     "(14)(25)",      "(234)",     "(12)(45)",
	 "(15)(23)",   "(14235)",   "(15243)",
	 "-(123)",     "-(13)(24)", "-(14523)",    "-(13)(25)",     "-(14)(32)", "-(14352)",
	 "-(135)",     "-(13452)",  "-(15342)",    "-(254)",        "-(12)(35)", "-(15)(34)",
	 "-(354)",     "-(12)(34)", "-(13245)",    "-(14)(25)",     "-(234)",    "-(12)(45)",
	 "-(15)(23)",  "-(14235)",  "-(15243)",
	 "(12354)",    "-(145)",    "-1"],
	["(123)",      "(13)(24)",  "(13)(25)",    "(14)(32)",      "(14352)X",  "(23)(45)",
	 "(12543)X",   "(15342)",   "(245)",       "(14)(25)",      "(143)X",    "(15)(24)",
	 "(235)",      "(154)",
	 "-(123)",     "-(13)(24)X","-(13)(25)",   "-(14)(32)",     "-(14352)",  "-(23)(45)X",
	 "-(12543)",   "-(15342)",  "-(245)",      "-(14)(25)X",    "-(143)",    "-(15)(24)",
	 "-(235)",     "-(154)",
	 "(12354)",    "-(14235)",  "-1"],
	["(13)(24)X",  "(25)(34)X", "(14)(23)X",   "(12435)X",      "(23)(45)X", "(14352)", 
	 "(153)X",     "(123)X",    "(12543)X",    "(254)X",        "(14532)X",  "(354)X",
	 "(14253)X",   "(12)(34)X", "(14)(25)X",   "(13542)X",      "(234)X",    "(235)X",
	 "(14)(35)X",  "(15432)X",  "(13)(45)X",
	 "-(13)(24)X", "-(25)(34)X","-(14)(23)X",  "-(12435)X",     "-(23)(45)X","-(14352)X",
	 "-(153)X",    "-(123)X",   "-(12543)X",   "-(254)X",       "-(14532)X", "-(354)X",
	 "-(14253)X",  "-(12)(34)X","-(14)(25)X",  "-(13542)X",     "-(234)X",   "-(235)X",
	 "-(14)(35)X", "-(15432)",  "-(13)(45)X",
	 "(15243)X",   "-(15)(34)X","-1X"],
	["(13)(24)X",  "(13)(25)X", "(14352)X",    "(153)X",        "(12543)X",  "(254)X",
	 "(12)(34)X",  "(13245)X",  "(12)(35)X",
	 "-(13)(24)X", "-(13)(25)X","-(14352)X",   "-(153)X",       "-(12543)X", "-(254)X",
	 "-(12)(34)X", "-(13245)X", "-(12)(35)X",
	 "(142)X",     "-(354)X",   "-1X"],
	["(13)(24)",   "(13254)X",  "(25)(34)",    "(13)(45)",      "(15342)",   "(135)X",
	 "(123)",      "(13452)",   "(254)X",      "(14)(25)",      "(13542)",   "(143)X",
	 "(15)(24)",   "(12)(45)X", "(15243)X", 
	 "-(13)(24)X", "-(13254)",  "-(25)(34)X",  "-(13)(45)X",    "-(15342)",  "-(135)",
	 "-(123)",     "-(13452)",  "-(254)",      "-(14)(25)",     "-(13542)",  "-(143)",
	 "-(15)(24)X", "-(12)(45)X","-(15243)X", 
	 "(14325)",    "-(14253)",  "-1"],
		       // begin copy 2 of 3, for the (+,-)a5 cables
	["(123)",      "(13)(24)",  "(14523)",     "(25)(34)",      "(13)(25)",  "(153)",
	 "(14)(23)",   "(14352)X",  "(12543)X",    "(254)",         "(12435)X",  "(14253)",
	 "(12)(35)X",  "(14532)",   "(15)(34)",    "(354)",         "(152)",     "(13542)",
	 "(12)(45)",   "(24)(35)",  "(15432)",
	 "-(123)X",    "-(13)(24)X","-(14523)",    "-(25)(34)X",    "-(13)(25)X","-(153)X",
	 "-(14)(23)X", "-(14352)",  "-(12543)",    "-(254)",        "-(12435)",  "-(14253)X",
	 "-(12)(35)",  "-(14532)",  "-(15)(34)X",  "-(354)X",       "-(152)",    "-(13542)X",
	 "-(12)(45)",  "-(24)(35)", "-(15432)",
	 "-(134)",     "(23)(45)X", "-1"],
	["(123)X",     "(13)(24)X", "(14523)X",    "(25)(34)X",     "(12435)X",  "(153)X",
	 "(14)(23)X",  "(13)(45)X", "(23)(45)X",   "(254)X",        "(14253)X",  "(14)(25)X",
	 "(13542)X",   "(134)X",    "(12)(45)X",   "(235)X",        "(15)(23)X", "(14235)X",
	 "(15243)X",   "(145)X",    "(12543)X", 
	 "-(123)X",    "-(13)(24)X","-(14523)X",   "-(25)(34)X",    "-(12435)X", "-(153)X",
	 "-(14)(23)X", "-(13)(45)X","-(23)(45)X",  "-(254)X",       "-(14253)X", "-(14)(25)X",
	 "-(13542)X",  "-(134)X",   "-(12)(45)",   "-(235)X",       "-(15)(23)X","-(14235)X",
	 "-(15243)X",  "-(145)X",   "-(12543)X", 
	 "-(15)(24)X", "(14532)X",  "-1X"], 
	["(123)X",     "(13)(24)X", "(14523)X",    "(25)(34)X",     "(15342)",   "(14)(23)", 
	 "(13)(45)X",  "(23)(45)",  "(135)",       "(254)",         "(13524)",   "(14)(25)X",
	 "(13542)X",   "(12)(45)",  "(15)(24)X",   "(235)X",        "(15)(23)X", "(14235)X",
	 "(15243)X",   "(154)X",    "(12543)",
	 "-(123)X",    "-(13)(24)X","-(14523)X",   "-(25)(34)X",    "-(15342)X", "-(14)(23)X",
	 "-(13)(45)X", "-(23)(45)", "-(135)X",     "-(254)X",       "-(13524)X", "-(14)(25)X",
	 "-(13542)X",  "-(12)(45)X","-(15)(24)",   "-(235)X",       "-(15)(23)X","-(14235)X",
	 "-(15243)",   "-(154)X",   "-(12543)X",
	 "-(12354)",   "(143)",     "-1"],
	["(123)",      "(13)(24)",  "(14523)",     "(13)(25)",      "(14)(32)X", "(14352)",
	 "(135)X",     "(13452)X",  "(15342)X",    "(254)X",        "(12)(35)X", "(15)(34)",
	 "(354)",      "(12)(34)X", "(13245)X",    "(14)(25)X",     "(234)X",    "(12)(45)X",
	 "(15)(23)",   "(14235)",   "(15243)X",    
	 "-(123)",     "-(13)(24)", "-(14523)",    "-(13)(25)X",    "-(14)(32)X","-(14352)",
	 "-(135)X",    "-(13452)X", "-(15342)X",   "-(254)",        "-(12)(35)", "-(15)(34)",
	 "-(354)X",    "-(12)(34)X","-(13245)",    "-(14)(25)X",    "-(234)X",   "-(12)(45)X",
	 "-(15)(23)X", "-(14235)X", "-(15243)",
	 "-(12354)",   "(145)",     "-1"],
	["(123)",      "(13)(24)",  "(13)(25)",    "(14)(32)",      "(14352)",   "(23)(45)X",
	 "(12543)",    "(15342)X",  "(245)",       "(14)(25)",      "(143)X",    "(15)(24)",
	 "(235)",      "(154)",
	 "-(123)",     "-(13)(24)", "-(13)(25)",   "-(14)(32)",     "-(14352)",  "-(23)(45)",
	 "-(12543)",   "-(15342)",  "-(245)",      "-(14)(25)X",    "-(143)",    "-(15)(24)",
	 "-(235)",     "-(154)",
	 "-(12354)",   "(14235)",   "-1"],
	["(13)(24)",   "(25)(34)",  "(14)(23)X",   "(12435)X",      "(23)(45)",  "(14352)",
	 "(153)X",     "(123)",     "(12543)X",    "(254)X",        "(14532)X",  "(354)",
	 "(14253)X",   "(12)(34)X", "(14)(25)X",   "(13542)",       "(234)X",    "(235)",
	 "(14)(35)X",  "(15432)",   "(13)(45)X",
	 "-(13)(24)",  "-(25)(34)X","-(14)(23)X",  "-(12435)X",     "-(23)(45)", "-(14352)",
	 "-(153)X",    "-(123)X",   "-(12543)X",   "-(254)",        "-(14532)",  "-(354)X",
	 "-(14253)",   "-(12)(34)X","-(14)(25)X",  "-(13542)X",     "-(234)X",   "-(235)",
	 "-(14)(35)X", "-(15432)",  "-(13)(45)X",
	 "-(15243)",   "(15)(34)",  "-1"],
	["(13)(24)X",  "(13)(25)X", "(14352)X",    "(153)X",        "(12543)X",  "(254)X",
	 "(12)(34)X",  "(13245)X",  "(12)(35)X",
	 "-(13)(24)X", "-(13)(25)X","-(14352)X",   "-(153)X",       "-(12543)X", "-(254)X",
	 "-(12)(34)X", "-(13245)X", "-(12)(35)X",
	 "-(142)X",    "(354)X",    "-1X"],
	["(13)(24)X",  "(13254)X",  "(25)(34)",    "(13)(45)X",     "(15342)",   "(135)",
	 "(123)",      "(13452)",   "(254)",       "(14)(25)",      "(13542)X",  "(143)X", 
	 "(15)(24)X",  "(12)(45)X", "(15243)X", 
	 "-(13)(24)",  "-(13254)",  "-(25)(34)X",  "-(13)(45)",     "-(15342)",  "-(135)X",
	 "-(123)",     "-(13452)",  "-(254)X",     "-(14)(25)",     "-(13542)",  "-(143)",
	 "-(15)(24)X", "-(12)(45)X","-(15243)", 
	 "-(14325)",   "(14253)",   "-1"],
	[              // begin copy 3 of 3, for the (-,-)a5 cables
	 "(123)X",     "(13)(24)X", "(14523)X",    "(25)(34)X",     "(13)(25)X", "(153)X",
	 "(14)(23)X",  "(14352)X",  "(12543)X",    "(254)X",        "(12435)X",  "(14253)X",
	 "(12)(35)X",  "(14532)X",  "(15)(34)X",   "(354)X",        "(152)X",    "(13542)X",
	 "(12)(45)X",  "(24)(35)X", "(15432)X",
	 "-(123)X",    "-(13)(24)X","-(14523)X",   "-(25)(34)X",    "-(13)(25)X","-(153)X",
	 "-(14)(23)X", "-(14352)X", "-(12543)X",   "-(254)X",       "-(12435)X", "-(14253)X",
	 "-(12)(35)X", "-(14532)",  "-(15)(34)X",  "-(354)X",       "-(152)X",   "-(13542)X",
	 "-(12)(45)X", "-(24)(35)X","-(15432)",
	 "(134)X",     "(23)(45)X", "-1X"],
	["(123)",      "(13)(24)",  "(14523)X",    "(25)(34)",      "(12435)",   "(153)",
	 "(14)(23)",   "(13)(45)",  "(23)(45)",    "(254)X",        "(14253)X",  "(14)(25)",
	 "(13542)",    "(134)",     "(12)(45)",    "(235)",         "(15)(23)",  "(14235)",
	 "(15243)",    "(145)X",    "(12543)", 
	 "-(123)",     "-(13)(24)X","-(14523)",    "-(25)(34)X",    "-(12435)X", "-(153)",
	 "-(14)(23)",  "-(13)(45)", "-(23)(45)",   "-(254)",        "-(14253)",  "-(14)(25)",
	 "-(13542)X",  "-(134)X",   "-(12)(45)X",  "-(235)",        "-(15)(23)", "-(14235)",
	 "-(15243)X",  "-(145)",    "-(12543)", 
	 "(15)(24)",   "(14532)",   "-1"], 
	["(123)X",     "(13)(24)X", "(14523)X",    "(25)(34)X",     "(15342)X",  "(14)(23)X",
	 "(13)(45)X",  "(23)(45)X", "(135)X",      "(254)X",        "(13524)X",  "(14)(25)X",
	 "(13542)X",   "(12)(45)X", "(15)(24)X",   "(235)X",        "(15)(23)X", "(14235)X",
	 "(15243)X",   "(154)X",    "(12543)X",
	 "-(123)X",    "-(13)(24)X","-(14523)X",   "-(25)(34)X",    "-(15342)",  "-(14)(23)X",
	 "-(13)(45)X", "-(23)(45)X","-(135)X",     "-(254)X",       "-(13524)",  "-(14)(25)X",
	 "-(13542)X",  "-(12)(45)X","-(15)(24)X",  "-(235)X",       "-(15)(23)X","-(14235)X",
	 "-(15243)X",  "-(154)X",   "-(12543)X",
	 "(12354)X",   "(143)X",    "-1X"],
	["(123)X",     "(13)(24)",  "(14523)X",    "(13)(25)",      "(14)(32)X", "(14352)X",
	 "(135)X",     "(13452)X",  "(15342)X",    "(254)X",        "(12)(35)X", "(15)(34)",
	 "(354)X",     "(12)(34)X", "(13245)X",    "(14)(25)X",     "(234)X",    "(12)(45)X",
	 "(15)(23)X",  "(14235)X",  "(15243)X",
	 "-(123)X",    "-(13)(24)X","-(14523)X",   "-(13)(25)X",    "-(14)(32)X","-(14352)X",
	 "-(135)X",    "-(13452)X", "-(15342)X",   "-(254)X",       "-(12)(35)X","-(15)(34)X",
	 "-(354)X",    "-(12)(34)X","-(13245)X",   "-(14)(25)X",    "-(234)X",   "-(12)(45)X",
	 "-(15)(23)X", "-(14235)",  "-(15243)X",
	 "(12354)X",   "(145)X",    "-1X"],
	["(123)X",     "(13)(24)X", "(13)(25)X",   "(14)(32)X",     "(14352)X",  "(23)(45)X",
	 "(12543)X",   "(15342)X",  "(245)X",      "(14)(25)X",     "(143)X",    "(15)(24)X",
	 "(235)X",     "(154)X",
	 "-(123)X",    "-(13)(24)X","-(13)(25)X",  "-(14)(32)X",    "-(14352)X", "-(23)(45)X",
	 "-(12543)X",  "-(15342)X", "-(245)X",     "-(14)(25)X",    "-(143)X",   "-(15)(24)X",
	 "-(235)X",    "-(154)X",
	 "(12354)X",   "(14235)X",  "-1X"],
	["(13)(24)",   "(25)(34)X", "(14)(23)X",   "(12435)X",      "(23)(45)",  "(14352)X",
	 "(153)X",     "(123)",     "(12543)X",    "(254)",         "(14532)",   "(354)",
	 "(14253)",    "(12)(34)X", "(14)(25)X",   "(13542)",       "(234)X",    "(235)X",
	 "(14)(35)X",  "(15432)",   "(13)(45)X",
	 "-(13)(24)X", "-(25)(34)X","-(14)(23)X",  "-(12435)",      "-(23)(45)X","-(14352)",
	 "-(153)X",    "-(123)X",   "-(12543)X",   "-(254)X",       "-(14532)",  "-(354)",
	 "-(14253)",   "-(12)(34)X","-(14)(25)X",  "-(13542)",      "-(234)X",   "-(235)",
	 "-(14)(35)X", "-(15432)X", "-(13)(45)X",
	 "(15243)",    "(15)(34)",  "-1"],
	["(13)(24)X",  "(13)(25)X", "(14352)X",    "(153)X",        "(12543)X",  "(254)X",
	 "(12)(34)X",  "(13245)X",  "(12)(35)X",
	 "-(13)(24)X", "-(13)(25)X","-(14352)",    "-(153)X",       "-(12543)X", "-(254)X",
	 "-(12)(34)X", "-(13245)X", "-(12)(35)X",
	 "(142)X",     "(354)X",    "-1X"],
	["(13)(24)",   "(13254)X",  "(25)(34)X",   "(13)(45)",      "(15342)",   "(135)",
	 "(123)X",     "(13452)X",  "(254)",       "(14)(25)",      "(13542)",   "(143)X",
	 "(15)(24)X",  "(12)(45)X", "(15243)X", 
	 "-(13)(24)X", "-(13254)",  "-(25)(34)X",  "-(13)(45)X",    "-(15342)",  "-(135)X",
	 "-(123)",     "-(13452)",  "-(254)",      "-(14)(25)X",    "-(13542)",  "-(143)X",
	 "-(15)(24)X", "-(12)(45)X","-(15243)",
	 "(14325)",    "(14253)",   "-1"]
      ]
    ];
    this.strutnumb3rs =
    [ 
      [ // a4
	[  1, 3, 9],
	[  1, 6,11]
      ],
      [  // a4z2
	[  1,12, 3,15, 7,23,22,19, 6],
	[ 13, 1,12, 3,15, 9, 4,22,21],
	[ 13, 1,12,15, 9, 4, 7,23],
	[ 13, 1,12, 3, 9,11,18, 7,16],
	[ 13,21, 1,12, 3,15, 9, 4]
      ],
      [ // s4
	[ 23, 5, 1, 8,16, 3,11,19,10],
	[ 23,13, 5,15,16, 3,11, 7,10],
	[ 23,16, 1,15,17, 6,12,20, 2,11],
	[  5, 1,16, 6,12,11] 
      ],
      [  // s4z2
	[11,41,19,44,36,34,12, 6, 3,28,42,33,23, 4,15, 1, 5,47,22,25,24,46,35],
	[11,41,36,10,19,29,32, 6, 3,30,33,23, 2, 8, 1,38,27,47,20,14,24],
	[11,36,10,25,19,41,12,14,32, 3,28,42,33,23,15, 5,27,20,22,47,24,46,35],
	[11,14,36,10,44,41,34,12,32, 3,26,42,23, 8,17,22,47,24,35],
	[14,36,44,27,10,34,12,11,37, 6, 3, 2,28,33, 1,25,20,22,21,24,35],
	[10,44,19,27,41,12,39,15,36, 3, 4,42,33,23,29,15, 1,38,14,24,47],
	[36,10,44,19,27,12,11,32,18, 3,34,33, 2,17, 1,45,21,25,24,35]
      ],
      [ // a5  
	[ 1, 6,20,45,43,51, 9,28,41,40,26,16,33,48,56,30,53,32,23,25,48],
	[ 1, 6,20,45,26,21,22,40,36,38,32, 4,23,35,52,27,58,19,41,26,51],
	[ 1, 6,20,45,55, 9,21,22,34,40,24,38,32,23,57,35,52,27,58,49,41],
	[ 1, 6,20,43, 9,28,34,13,55,40,33,56,30, 3,17,38, 5,23,52,27,58],
	[ 1, 6,43, 9,28,22,41,55,15,38,11,57,35,49],
	[ 6,45, 9,26,22,28,51, 1,41,40,18,30,36, 3,38,32, 5,35,29,48,21],
	[ 6,43,28,51,41,40, 3,17,33],
	[ 6,39,45,21,55,34, 1,13,40,38,32,11,57,23,58]
      ],
      [ // a5z2                             copy 1 of 3 for the a5(-,+)
	[ 1, 6, 20, 45, 43, 51, 9,28, 41, 40,26,16,33, 48, 56,30, 53,32,23,25, 48,
	 61,66, 80,105,103,111,69,88,101,100,86,76,93,108,116,90,113,92,83,85,108,
			 4, 82,60],
	[ 1, 6, 20, 45, 9,21,22, 40,36,38,32, 4,23,35, 52,27, 58,19, 41,26, 51,
	 61,66, 80,105,69,81,82,100,96,98,92,64,83,95,112,87,118,79,101,86,111,
			57, 78,60],
	[ 1, 6,20, 45, 55, 9,21,22,34, 40,24,38,32,23, 57,35, 52,27, 58, 49, 41,
	 61,66,80,105,115,69,81,82,94,100,84,98,92,83,117,95,112,87,118,109,101,
			31, 71,60],
	[ 1, 6,20, 43, 9,28,34,13, 55, 40,33, 56,30, 3,17,38, 5,23, 52,27, 58,
	 61,66,80,103,69,88,94,73,115,100,93,116,90,63,77,98,65,83,112,87,118,
			31, 79,60],
	[ 1, 6, 43, 9,28,22, 41, 55,15,38,11, 57,35, 49,
	 61,66,103,69,88,82,101,115,75,98,71,117,95,109,
			31, 87,60],
	[ 6, 45, 9,26,22,28, 51, 1, 41, 40,18,30,36, 3,38,32, 5,35,29, 48,21,
	 66,105,69,86,82,88,111,61,101,100,78,90,96,63,98,92,65,95,89,108,81,
			58,116,60],
	[ 6, 43,28, 51, 41, 40, 3,17,33,
	 66,103,88,111,101,100,63,77,93,
			10, 90,60],
	[ 6,39, 45,21, 55,34, 1,13, 40,38,32,11, 57,23, 58,
	 66,99,105,81,115,94,61,73,100,98,92,71,117,83,118,
			37, 96,60],
					 //  copy 2 of 3 for the a5(+,-)
	[ 1, 6, 20, 45, 43, 51, 9,28, 41, 40,26,16,33, 48, 56,30, 53,32,23,25, 48,
	 61,66, 80,105,103,111,69,88,101,100,86,76,93,108,116,90,113,92,83,85,108,
			 64,22,60],
	[ 1, 6, 20, 45, 9,21,22, 40,36,38,32, 4,23,35, 52,27, 58,19, 41,26, 51,
	 61,66, 80,105,69,81,82,100,96,98,92,64,83,95,112,87,118,79,101,86,111,
			117,18,60],
	[ 1, 6,20, 45, 55, 9,21,22,34, 40,24,38,32,23, 57,35, 52,27, 58, 49, 41,
	 61,66,80,105,115,69,81,82,94,100,84,98,92,83,117,95,112,87,118,109,101,
			 91, 11, 60],
	[ 1, 6,20, 43, 9,28,34,13, 55, 40,33, 56,30, 3,17,38, 5,23, 52,27, 58,
	 61,66,80,103,69,88,94,73,115,100,93,116,90,63,77,98,65,83,112,87,118,
			 91,19,60],
	[ 1, 6, 43, 9,28,22, 41, 55,15,38,11, 57,35, 49,
	 61,66,103,69,88,82,101,115,75,98,71,117,95,109,
			 91,27,60],
	[ 6, 45, 9,26,22,28, 51, 1, 41, 40,18,30,36, 3,38,32, 5,35,29, 48,21,
	 66,105,69,86,82,88,111,61,101,100,78,90,96,63,98,92,65,95,89,108,81,
			118, 56,60],
	[ 6, 43,28, 51, 41, 40, 3,17,33,
	 66,103,88,111,101,100,63,77,93,
			 70, 30,60],
	[ 6,39, 45,21, 55,34, 1,13, 40,38,32,11, 57,23, 58,
	 66,99,105,81,115,94,61,73,100,98,92,71,117,83,118,
			 97, 36,60],
					 //    copy 3 of 3 for the a5(-,-)
	[ 1, 6, 20, 45, 43, 51, 9,28, 41, 40,26,16,33, 48, 56,30, 53,32,23,25, 48,
	 61,66, 80,105,103,111,69,88,101,100,86,76,93,108,116,90,113,92,83,85,108,
			   4, 22,60],
	[ 1, 6, 20, 45, 9,21,22, 40,36,38,32, 4,23,35, 52,27, 58,19, 41,26, 51,
	 61,66, 80,105,69,81,82,100,96,98,92,64,83,95,112,87,118,79,101,86,111,
			   57,18,60],
	[ 1, 6,20, 45, 55, 9,21,22,34, 40,24,38,32,23, 57,35, 52,27, 58, 49, 41,
	 61,66,80,105,115,69,81,82,94,100,84,98,92,83,117,95,112,87,118,109,101,
			  31,11,60],
	[ 1, 6,20, 43, 9,28,34,13, 55, 40,33, 56,30, 3,17,38, 5,23, 52,27, 58,
	 61,66,80,103,69,88,94,73,115,100,93,116,90,63,77,98,65,83,112,87,118,
			  31,19,60],
	[ 1, 6, 43, 9,28,22, 41, 55,15,38,11, 57,35, 49,
	 61,66,103,69,88,82,101,115,75,98,71,117,95,109,
			  31,27,60],
	[ 6, 45, 9,26,22,28, 51, 1, 41, 40,18,30,36, 3,38,32, 5,35,29, 48,21,
	 66,105,69,86,82,88,111,61,101,100,78,90,96,63,98,92,65,95,89,108,81,
			  58,56,60],
	[ 6, 43,28, 51, 41, 40, 3,17,33,
	 66,103,88,111,101,100,63,77,93,
			  10,30,60],
	[ 6,39, 45,21, 55,34, 1,13, 40,38,32,11, 57,23, 58,
	 66,99,105,81,115,94,61,73,100,98,92,71,117,83,118,
			  37,36,60]
      ]
    ];
}

/**
 * Initialize the collections of matrices Jom and Jg. These
 * represent:
 *     Jom[G][rep][g] = local stress matrix for g in G under rep
 *     Jg[G][rep][g] = image of g in G under rep
 */
symtens.prototype.init = function() {

    // initialize empty matrices
    this.Jom = new Array(this.many);
    this.Jg  = new Array(this.many);
    for (var G = 0; G < this.many; G++) {
        this.Jom[G] = new Array(this.reps[G]);
        this.Jg[G]  = new Array(this.reps[G]);
        for (var ii = 0; ii < this.reps[G]; ii++) {
	    this.Jom[G][ii] = new Array(this.order[G]);
	    this.Jg[G][ii]  = new Array(this.order[G]);
        }

	// make Jg = representation matrices for each group element
	for (var j = 0; j < this.order[G]; j++) {
	    for (var rp = 0; rp < this.reps[G]; rp++) {
	        this.Jg[G][rp][j] = math.pow(this.mx[G][rp][0], this.to[G][j][0]);
	        for (var ngen = 1; ngen < this.gens[G]; ngen++) {
	            this.Jg[G][rp][j] = numeric.dot(this.Jg[G][rp][j],
				                    math.pow(this.mx[G][rp][ngen],
							     this.to[G][j][ngen]));
	        }
	    }
	}

	// make Jom = local stress matrices I-g or 2I-g-g^{-1} for each group element 
	for (var rep = 0; rep < this.reps[G]; rep++) {
	    var sz = this.deg[G][rep];
	    var eye = numeric.identity(sz);
	    for (var j = 0; j < this.order[G]; j++) {
	        if (this.isinvolution[G][j] == false) {
	            var trans = numeric.transpose(this.Jg[G][rep][j]);
	            this.Jom[G][rep][j] = numeric.sub(numeric.sub(numeric.mul(eye, 2),
								  this.Jg[G][rep][j]),
						      trans);
	        } else {  // it is involution
	            this.Jom[G][rep][j] = numeric.sub(eye, this.Jg[G][rep][j]);
	        }
	    }
        }

    }
}

/**
 * Return realization of tensegrity. Note that return is a sym_tens_obj,
 * not a symtens. See the object declared just below.
 */
symtens.prototype.realize_symmetric_tensegrity = function() {

    // abort if degree of winning rep is >3
    var S = this.deg[this.grp][this.winr];
    if (S > 3) {
        console.log("winner has deg > 3, can't realize tensegrity?");
        return ;
    }

    // this is the object that will be returned
    var sym_tens_obj = {
	"S" : S,
	"c1" : this.c1,
	"c2" : this.c2,
	"s1" : this.s1,
	"omeg1": this.omeg1,
	"omeg_1": this.omeg_1,

	// the collection of vertices, cables, and struts we fill next
	"V" : [],
	"C1" : [],
	"C2" : [],
	"S1" : []
    };

    // create JOM = the stress matrix (fully numeric, with omeg1 and omeg_1 substituted)
    this.JOM =
        numeric.add(numeric.mul(this.Jom[this.grp][this.winr][this.c1], this.omeg1),
		    numeric.mul(this.Jom[this.grp][this.winr][this.c2], 1-this.omeg1),
		    numeric.mul(this.Jom[this.grp][this.winr][this.s1], this.omeg_1));

    // create Jp1 = a vector in the kernel of JOM
    // (recall SVD and eigendecomp are same for pos semi-def matrices)
    var svd = numeric.svd(this.JOM);
    this.Jp1 = [];
    for (var r = 0; r < S; r++) {
        this.Jp1.push( svd.V[r][this.rk] );
    }
    if (this.Jp1[0] < 0) {
        this.Jp1 = numeric.mul(this.Jp1, -1);
    }
    this.Jp1 = numeric.mul(this.Jp1, 1.0 / numeric.norm2(this.Jp1));


    // create the vertices of the tensegrity by taking rep(g) * Jp1 for each g in G
    var VV = [];
    for (var k = 0; k < this.order[this.grp]; k++) {
        var v = [0,0,0];
        var Jgkp1 = numeric.dot(this.Jg[this.grp][this.winr][k], this.Jp1);
        if (S >= 1) { v[0] += Jgkp1[0]; }
        if (S >= 2) { v[1] += Jgkp1[1]; }
        if (S >= 3) { v[2] += Jgkp1[2]; }
        VV.push(v);
    }
    sym_tens_obj.V = VV;

    // iterate through each g in G and compute cables and structs {g, g*c1}, ...
    var grp = this.grp;
    var winr = this.winr;
    var c1 = this.c1;
    var c2 = this.c2;
    var s1 = this.s1;
    for (var i = 0; i < this.order[this.grp]; i++) {

	// these are points corresponding to g, g*c1, g*c2, g*s1
        var Jgip1   = numeric.dot(this.Jg[grp][winr][i], this.Jp1);
	var Jgic1p1 = numeric.dot(numeric.dot(this.Jg[grp][winr][i], this.Jg[grp][winr][c1]),
				  this.Jp1);
        var Jgic2p1 = numeric.dot(numeric.dot(this.Jg[grp][winr][i], this.Jg[grp][winr][c2]),
				  this.Jp1);
        var Jgis1p1 = numeric.dot(numeric.dot(this.Jg[grp][winr][i], this.Jg[grp][winr][s1]),
				  this.Jp1);

	// path will be x -> z with midpoint y
        var x=[0,0,0], y=[0,0,0], z=[0,0,0];

	// x is always the point corresponding to g
        x[0] = Jgip1[0];
        if (S >= 1) { x[1] = Jgip1[1]; }
        if (S >= 2) { x[2] = Jgip1[2]; }

	// make path for c1
	z[0] = Jgic1p1[0];
	if (S >= 1) { z[1] = Jgic1p1[1]; }
	if (S >= 2) { z[2] = Jgic1p1[2]; }
	y = numeric.mul(numeric.add(x, z), 0.5);
	var pathc1 = [
	  [ x[0], x[1], x[2] ],
	  [ y[0], y[1], y[2] ],
	  [ z[0], z[1], z[2] ]
	];

	// make path for c2
	z=[0,0,0];
	z[0] = Jgic2p1[0];
	if (S >= 1) { z[1] = Jgic2p1[1]; }
	if (S >= 2) { z[2] = Jgic2p1[2]; }
	y = numeric.mul(numeric.add(x,z), 0.5);
	var pathc2 = [
	  [ x[0], x[1], x[2] ],
	  [ y[0], y[1], y[2] ],
	  [ z[0], z[1], z[2] ]
	];

	// make path for s1
	z=[0,0,0];
	z[0] = Jgis1p1[0];
	if (S >= 1) { z[1] = Jgis1p1[1]; }
	if (S >= 2) { z[2] = Jgis1p1[2]; }
	y = numeric.mul(numeric.add(x,z), 0.5);
	var paths1 = [
	  [ x[0], x[1], x[2] ],
	  [ y[0], y[1], y[2] ],
	  [ z[0], z[1], z[2] ]
	];

	// add paths to the cable and strut collections
        sym_tens_obj.C1.push(pathc1);
        sym_tens_obj.C2.push(pathc2);
        sym_tens_obj.S1.push(paths1);
    }

    return sym_tens_obj;
}

/**
 * Return the rank of the stress matrix for given rep produced by substituting om1 for omega1,
 * 1-om1 for omega2, and y for omega_{-1}
 */
symtens.prototype.getrank = function(rep, om1, y) {

    // make the stress matrix
    var m = numeric.add(numeric.mul(this.Jom[this.grp][rep][this.c1], om1),
                        numeric.mul(this.Jom[this.grp][rep][this.c2], 1-om1),
                        numeric.mul(this.Jom[this.grp][rep][this.s1], y));

    // count singular values > epsilon to get rank
    var rank = 0;
    var svd = numeric.svd(m);
    for (var ii = 0; ii < svd.S.length; ii++) {
        if (Math.abs(svd.S[ii]) > this.eps) { rank += 1; }
    }
    return rank;
}

/**
 * Return the determinant of the stress matrix for given rep produced by substituting
 * om1 for omega1, 1-om1 for omega2, and y for omega_{-1}.
 */
symtens.prototype.getdet = function(rep, om1, y) {

    // make the stress matrix
    var m = numeric.add(numeric.mul(this.Jom[this.grp][rep][this.c1], om1),
                        numeric.mul(this.Jom[this.grp][rep][this.c2], 1-om1),
                        numeric.mul(this.Jom[this.grp][rep][this.s1], y));

    // return determinant (note special case for complex)
    if (this.cx[this.grp][rep]) { return m[0][0]; }
    return numeric.det(m);
}

/**
 * Construct lines for determinant plot. Return array of lines with the last element
 * being the representation number.
 */
symtens.prototype.getlines = function() {
    var n_sample = 18;
    var eps = 0.00001;
    var nsaved = 0;

    var lines = [];
    var cur_lines = [];

    for (var rep = 2; rep < this.reps[this.grp]; rep++) {
        var omit = false;
        var found = false;

        for (var x = 0; x < n_sample; x++) {
            var dy = 0.000301;
            var y = 0.5*dy;

            var deter  = this.getdet(rep, (0.5+x)/n_sample, y);
            var dtest1 = this.getdet(rep, (0.5+x)/n_sample, y-dy);
            var dtest2 = this.getdet(rep, (0.5+x)/n_sample, y - (n_sample-1)*dy);

            var changes = false;
            if (Math.abs(dtest1-dtest2) > eps) { changes = true; }
            else {

                // here check whether s1 in kernel of rep because we don't know any reason
		// why the det would fail to change unless s1 is in the kernel
                if ( numeric.sum(numeric.abs(this.Jom[this.grp][rep][this.s1])) > eps ) { }

                // if decreasing y does not affect deter, then there is no root so omit
		// drawing nonexistent curve for that rep out of the for x loop
                omit = true;
                break;
            }

            // now changes is true, and we look for evidence of a root
            while ((deter > eps) && (y > -5)) {
                y -= dy;
                deter = this.getdet(rep, (0.5+x)/n_sample, y);
            }

            // now we are below threshold .00001 or at -5; in case the latter:
            if (y < -4.95) { omit = true; }

            // we are below threshold, and think there is a root, possibly double.
            // a quick test works in most cases: see whether a lower y changes 
            // the sign of determinant. If so record approximate root. If not
            // check for sign change in the slope suggesting double root
            // try 180 times
            for (var k=0; k< 180; k++) {
                dtest1 = this.getdet(rep, (0.5+x)/n_sample, y-dy);

                // imperfect first 0 of det, for visual only out of the for
                if (dtest1 <= 0.0) {
                    found = true;
                    cur_lines.push(y);
                    break;
                } else {
                    dtest2 = this.getdet(rep, (0.5+x)/n_sample, y-(2*dy));
                    if ((deter > dtest1) && (dtest2 > dtest1)) {
                        found = true;
                        cur_lines.push(y);
                        break;
                    }
                }
                y -= dy;
                deter = this.getdet(rep, (0.5+x)/n_sample, y);
            }

            if (found==false) { omit = true; break; }
        }

        if (omit) { continue; }
        else {
            cur_lines.push(rep);
            lines.push(cur_lines);
            cur_lines = [];
            nsaved++;
        }

    }

    return lines;
}

/**
 * Set the value of this.rk, this.omeg1, this.omeg_1, this.winr by finding the
 * representation with largest y such that getdet(rep, om1, y) == 0. Return
 * true if found a winning rep and false if not.
 */
symtens.prototype.find0 = function(om1) {
    var y1 = 0.002;
    var y2 = 0.005;
    var mindet = 1.0;
    var nreps = this.reps[this.grp];

    // initialize array detry containing [det at y1, det at y2] for each rep
    // initialize mindet to have max value of all determinants at y2
    var detry = [];
    detry.push([0,0]);
    detry.push([0,0]);
    for (var r = 2; r < nreps; r++) {
        var d = this.getdet(r,om1,y1);
        if (r==2) { mindet = d; }
        else if (mindet < d) { mindet = d; }
        detry.push( [ d, this.getdet(r,om1,y2) ] );
    }

    // decrease y1 and keep array detry updated for the new y1
    // update mindet to have min value of all determinants at y1, stop when this is negative
    while (mindet > 0) {
        y1 -= .001901;
        for (var r = 2; r < nreps; r++) {
            var d = this.getdet(r, om1, y1);
            detry[r][0] = this.getdet(r, om1, y1);
            if (mindet > detry[r][0]) { mindet = detry[r][0]; }
        }
    }

    // for each representation, if determinant changes sign then find y where it is 0
    for (var r = nreps-1; r > 1; r--) {
        if ((detry[r][0]*detry[r][1]) <= 0.0) {
            var y = this.bisect(r, om1, y1, y2);

	    // check that other determinants don't have zero at larger y
            var checky = -10.0;
            var checkr = -20;
            for (var rr = r-1; rr > 1; rr--) {
                if ((this.getdet(rr,om1,y)*this.getdet(rr,om1,y2)) <= 0.0) {
                    checky = this.bisect(rr, om1, y, y2);
                    checkr = rr;
                }
            }

            if (checky > y) {
                y = checky;
                r = checkr;
            }

            this.rk = this.getrank(r, om1, y);
            this.omeg1 = om1;
            this.omeg_1 = y;
            this.winr = r;
            return true;
        }
    }

    return false;
}

/**
 * Return the y-value at which the determinant of the stress matrix i 0 by repeatedly
 * bisecting the region [y1, y2] where the determinant changes sign.
 */
symtens.prototype.bisect = function(rep, om1, y1, y2) {
    var y = (y1+y2)/2;
    var sz = this.deg[this.grp][rep];

    // while stress matrix is nonsingular, bisect region and pick half where sign changes
    while (this.getrank(rep, om1, y) == sz ) {
        if (this.getdet(rep, om1, y) * this.getdet(rep, om1, y2) <= 0.0) {
            y1 = y;
        } else {
            y2 = y;
        }
        y = y1 + ((y2-y1)/2);
    }
    return y
}

module.exports = {
  symtens : symtens
}
